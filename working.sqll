-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop existing table if it exists
DROP TABLE IF EXISTS intern_profiles;

-- Create intern_profiles table with user_id as primary key
CREATE TABLE IF NOT EXISTS intern_profiles (
  user_id TEXT PRIMARY KEY,  -- This directly matches auth.uid()
  email TEXT NOT NULL,
  first_name TEXT,
  last_name TEXT,
  phone_number TEXT,
  github_url TEXT,
  resume_url TEXT,
  location TEXT,
  university TEXT,
  major TEXT,
  graduation_year TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Drop the trigger if it exists and recreate it
DROP TRIGGER IF EXISTS update_intern_profiles_updated_at ON intern_profiles;

-- Create a trigger to update the updated_at timestamp
CREATE TRIGGER update_intern_profiles_updated_at
BEFORE UPDATE ON intern_profiles
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Enable Row Level Security
ALTER TABLE intern_profiles ENABLE ROW LEVEL SECURITY;

-- Create policies for intern_profiles
-- View policy - Users can view their own profile
DROP POLICY IF EXISTS "Users can view their own profile" ON intern_profiles;
CREATE POLICY "Users can view their own profile"
  ON intern_profiles
  FOR SELECT
  USING (true);  -- Allow all authenticated users to view profiles for testing

-- Insert policy - Users can insert their own profile
DROP POLICY IF EXISTS "Users can insert their own profile" ON intern_profiles;
CREATE POLICY "Users can insert their own profile"
  ON intern_profiles
  FOR INSERT
  WITH CHECK (true);  -- Allow all authenticated users to insert for testing

-- Update policy - Users can update their own profile
DROP POLICY IF EXISTS "Users can update their own profile" ON intern_profiles;
CREATE POLICY "Users can update their own profile"
  ON intern_profiles
  FOR UPDATE
  USING (true);  -- Allow all authenticated users to update for testing

-- Delete policy - Users can delete their own profile
DROP POLICY IF EXISTS "Users can delete their own profile" ON intern_profiles;
CREATE POLICY "Users can delete their own profile"
  ON intern_profiles
  FOR DELETE
  USING (true);  -- Allow all authenticated users to delete for testing

-- Grant permissions to authenticated users
GRANT ALL ON intern_profiles TO authenticated;

-- Add a bypass policy for testing (ONLY USE IN DEVELOPMENT)
-- This allows any operation from the service role
DROP POLICY IF EXISTS "Service role bypass" ON intern_profiles;
CREATE POLICY "Service role bypass"
  ON intern_profiles
  USING (true);  -- Allow all operations for testing

-- Create a function to handle new user registration
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.intern_profiles (user_id, email)
  VALUES (new.id, new.email);
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop the trigger if it exists
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Create the trigger for automatic profile creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Note: Since auth.uid() returns NULL in the SQL Editor context,
-- you'll need to insert profiles through your application where the user is properly authenticated.
-- Alternatively, for testing, you can manually insert a profile with a specific user_id: 

SELECT tgname, tgenabled 
FROM pg_trigger 
WHERE tgname = 'on_auth_user_created';

SELECT proname, prosrc 
FROM pg_proc 
WHERE proname = 'handle_new_user'; 